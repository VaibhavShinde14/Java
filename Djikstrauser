import java.util.*;

public class Dijkstra {

    private static final int INFINITY = Integer.MAX_VALUE;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of vertices: ");
        int numVertices = scanner.nextInt();

        int[][] graph = new int[numVertices][numVertices];
        System.out.println("Enter the adjacency matrix:");

        for (int i = 0; i < numVertices; i++) {
            for (int j = 0; j < numVertices; j++) {
                graph[i][j] = scanner.nextInt();
            }
        }

        System.out.print("Enter the source vertex (0 to " + (numVertices - 1) + "): ");
        int sourceVertex = scanner.nextInt();

        int[] shortestDistances = dijkstra(graph, sourceVertex);
        System.out.println("Shortest distances from the source vertex:");

        for (int i = 0; i < numVertices; i++) {
            System.out.println("Vertex " + i + ": " + shortestDistances[i]);
        }

        scanner.close();
    }

    private static int[] dijkstra(int[][] graph, int sourceVertex) {
        int numVertices = graph.length;
        int[] shortestDistances = new int[numVertices];
        boolean[] visited = new boolean[numVertices];

        Arrays.fill(shortestDistances, INFINITY);
        Arrays.fill(visited, false);

        shortestDistances[sourceVertex] = 0;

        for (int count = 0; count < numVertices - 1; count++) {
            int currentVertex = getMinDistanceVertex(shortestDistances, visited);

            visited[currentVertex] = true;

            for (int v = 0; v < numVertices; v++) {
                if (!visited[v] && graph[currentVertex][v] != 0
                        && shortestDistances[currentVertex] != INFINITY
                        && shortestDistances[currentVertex] + graph[currentVertex][v] < shortestDistances[v]) {
                    shortestDistances[v] = shortestDistances[currentVertex] + graph[currentVertex][v];
                }
            }
        }

        return shortestDistances;
    }

    private static int getMinDistanceVertex(int[] distances, boolean[] visited) {
        int minDistance = INFINITY;
        int minIndex = -1;

        for (int v = 0; v < distances.length; v++) {
            if (!visited[v] && distances[v] < minDistance) {
                minDistance = distances[v];
                minIndex = v;
            }
        }

        return minIndex;
    }
}
